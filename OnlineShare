File Share - S1-3RD NFS.
    - Mount: sudo mount -t nfs 10.73.194.36:/vol/virtqe3rd/boyang/ /mnt/
    - Write: sudo cp local_file_or_folder /mnt/
    - Read: sudo /mnt/ cp local_file_or_folder 
    - Read: http://fileshare.englab.nay.redhat.com/pub/section1/virtqe3rd/boyang/

NFS(perf-insight).
    - Mount: sudo mount -t nfs perf-insight.lab.eng.pek2.redhat.com:/nfs /mnt
    - Write: sudo cp local_file_or_folder /mnt/
    - Read1: sudo /mnt/ cp local_file_or_folder 
    - Read2: http://perf-insight.lab.eng.pek2.redhat.com/perf-insight/


How to upgrade a ESXi6.7 to ESXi7.0.
1. esxcli software sources profile list -d /vmfs/volumes/5c9bf508-925a81c5-8aa9-40623106c271/VMware-ESXi-7.0.0-15843807-depot.zip
2. esxcli software profile update -p ESXi-7.0.0-15843807-standard -d /vmfs/volumes/5c9bf508-925a81c5-8aa9-40623106c271/VMware-ESXi-7.0.0-15843807-depot.zip --dry-run
3. esxcli software profile update -p ESXi-7.0.0-15843807-standard -d /vmfs/volumes/5c9bf508-925a81c5-8aa9-40623106c271/VMware-ESXi-7.0.0-15843807-depot.zip ---no-sig-check


How to install a vCenter.
1. Download a VMware-VCSA-all-7.0.1-17004997 from vmware.com to a Windows / Linux machine.
2. Check "E:\vcsa-ui-installer" folder to select related Windows / Linux installer.
3. Click this application to install. 
4. During installation, should fill a esxi host IP(10.73.225.230), Account(root / 123qweP) where vCenter installed.
5. When set vCenter VM(vsphere vcenter appliance) user name, please set (root / Redhat@110).


How to upgrade a linux kernel.
1. Prepre the compile ENV.
  yum install -y m4 make gcc ncurses-devel flex bison openssl-devel elfutils-libelf-devel perl
2. Download target kernel from https://www.kernel.org/ to /usr/src/kernels/ 
  cd /usr/src/kernels/
  wget https://git.kernel.org/torvalds/t/linux-5.10-rc6.tar.gz 
  tar -xvf linux-5.10-rc6.tar.gz 
  cd /usr/src/kernels/linux-5.10-rc6
  cp /boot/config-5.8.15-301.fc33.x86_64 .config
  make menuconfig to disable  Kernel hacking ---> Compile-time checks and compiler options ---> Compile the kernel with debug info
  make
  make all
  make modules_install 
  make install
  shutdown -r 0


How to Setup Code Coverage Test in ESXi.
 0. Confirm which files need to be added to CC Fiel List: 
  a. arch/x86/kernel/cpu/vmware.c
  b. drivers/net/vmxnet3
  c. drivers/scsi/vmw_pvscsi.c
  d. drivers/gpu/drm/vmwgfx
  e. drivers/misc/vmw_balloon.c
  f. drivers/infiniband/hw/vmw_pvrdma
  g. drivers/net/ethernet/mellanox
  h. drivers/net/ethernet/intel


ISA
https://www.plantation-productions.com/Webster/www.artofasm.com/Windows/HTML/ISA.html


How to update / upgrade ESXi host from https://my.vmware.com/group/vmware/patch#search.
1. Download related ESXi650-202011002.zip or VMware-ESXi-7.0U1d-17551050-depot.zip which should includes all cumulative patches.
2. SCP it to esxi host datastore.
3. Confirm profile name with "esxcli software sources profile list  --depot=/vmfs/volumes/56bfff0f-525df268-8993-d89d6726bbf0/ESXi650-202011002.zip"
    Name                             Vendor        Acceptance Level
    -------------------------------  ------------  ----------------
    ESXi-6.5.0-20201103001-standard  VMware, Inc.  PartnerSupported
    ESXi-6.5.0-20201103001-no-tools  VMware, Inc.  PartnerSupported
4. Update it with "esxcli software profile update  --depot=/vmfs/volumes/56bfff0f-525df268-8993-d89d6726bbf0/ESXi650-202011002.zip -p ESXi-6.5.0-20201103001-standard --no-sig-check"


How to extend VM's a disk. (VM FW should be BIOS. If VM FW is EFI, after extendtion, VM can't be booted up).
1. Shutdown a VM, add a new disk(64G) to the VM.
2. Boot the VM.
3. "sudo fdisk -l". PS: /dev/sdb is the new disk.
       - Disk /dev/sda: 16 GiB, 17179869184 bytes, 33554432 sectors
       - Disk /dev/sdb: 64 GiB, 68719476736 bytes, 134217728 sectors
       - Disk /dev/mapper/rhel_vm--197--198-root: 13.4 GiB, 83097550848 bytes, 162299904 sectors
       - Disk /dev/mapper/rhel_vm--197--198-swap: 1.6 GiB, 1719664640 bytes, 3358720 sectors
4. "sudo fdisk /dev/sdb".
       - Command (m for help): n
       - Select (default p): p
       - Command (m for help): t
       - Partition number (1-3, default 3): L
       - Hex code (type L to list all codes): 8e     
       - Command (m for help): w
5. "partprobe".
6. "sudo fdisk -l".
7. "sudo pvcreate /dev/sdb1".
8. "sudo vgs".
       - output:  rhel_vm-197-198   1   3   0 wz--n- <59.00g    0 
9. "sudo vgextend rhel_vm-197-198 /dev/sdb1".
10. "sudo lvextend /dev/mapper/rhel_vm--197--198-root  /dev/sdb1". PS: See step 3, extend 13.4 + 64.
11. "sudo xfs_growfs /dev/mapper/rhel_vm--197--198-root".
12. "du -h".


Netperf - FYI.
A. 批量(bulk)网络流量的性能
    - 批量数据传输典型的例子有ftp等网络应用（即一次传输整个文件）。根据使用传输协议的不同，分为TCP批量传输和UDP批量传输.
        - Netperf缺省情况下进行TCP批量传输，即-t TCP_STREAM。netperf 向 netserver发送批量的TCP数据分组，以确定数据传输过程中的吞吐量.
        - UDP_STREAM用来测试进行UDP批量传输时的网络性能。注意，此时测试分组的大小不得大于socket的发送与接收缓冲大小，否则会报出错.
B. 请求/应答(request/response)网络流量的性能
    - 另一类网络流量类型是在client/server中的request/response模式。在每次交易（transaction）中，client向server发出小的查询分组，server接收到请求，处理后返回大的结果数据.
        - TCP_RR测试对象是多次TCP request和response的交易过程，它们发生在同一个TCP连接中，常出现在数据库应用中。数据库的client与server建立一个TCP连接以后，在这个连接中传送数据库的多次交易过程.
        - TCP_CRR为每次交易建立一个新的TCP连接。最典型的就是HTTP，每次HTTP交易是在一条单独的TCP连接中进行的。由于不停地建立新的TCP连接，且在交易结束后拆除TCP连接，交易率受到很大的影响.
        - UDP_RR方式使用UDP分组进行request/response的交易过程。由于没有TCP连接所带来的负担，所以我们推测交易率一定会有相应的提升.


How to access Xen Jenkins master. (Will be dropped in 31 / Mar).
1. Add your pub key to Xen Jenkins master. (Ask wshi).
2. ssh jenkins@xen-jenkins.rhev-ci-vms.eng.rdu2.redhat.com.


How to access ESXi Jenkins(ci-jenkins-csb-esxi.apps.ocp4.prod.psi.redhat.com).
PS. ESXi Jenkins based on OCP 4.6.
1. Install command oc and in your local terminal, type into "oc login --server=https://api.ocp4.prod.psi.redhat.com:6443 -n jenkins-csb-esxi".
    username: boyang
    password: B*************
    
    Output: 
    -------------
    Using project "jenkins-csb-esxi".
    -------------
2. In your local terminal type into "oc get pods"

    Output:
    -------------
    [boyang@localhost Xen-Jenkins]$ oc get pods
    NAME                        READY     STATUS      RESTARTS   AGE
    ci-jenkins-1-build          0/1       Completed   0          4h12m
    ci-jenkins-1-deploy         0/1       Completed   0          3h54m
    ci-jenkins-1-jsgmz          1/1       Running     0          3h54m
    ci-jenkins-docker-2-build   0/1       Completed   0          7h42m
    ci-jenkins-slave-1-deploy   0/1       Completed   0          4h12m
    ci-jenkins-slave-1-l6wnp    1/1       Running     0          4h12m
    ci-jenkins-slave-2-build    0/1       Completed   0          7h42m
    -------------
3. Login target Jenkins pod(ci-jenkins-1-jsgmz 1/1 Running) shell. PS. I think slave pod(ci-jenkins-slave-1-l6wnp 1/1 Running) shell.
    oc rsh ci-jenkins-1-jsgmz
    
    Output:
    -------------
    sh-4.2$ cd /var/lib/jenkins
    -------------
    PS. Path "/var/lib/jenkins" is the Jenkins home.
    
    
How to run pbench-uperf.
1. Setup ENV in VM-1 and VM-2.
    1.1 VM-1:
        cd /root/
        git clone https://github.com/virt-s1/perf-agent.git 
        cd /root/perf-agent/pbench_setup
        ssh-keygen 
        ssh-copy-id VM-1-IP
        ssh-copy-id VM-2 IP
        vim /root/perf-agent/pbench_setup/inventory # Add VM-1-IP and VM-2-IP to inventory.
        yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
        yum -y --enablerepo=epel install ansible
        sudo mount -t nfs perf-insight.lab.eng.pek2.redhat.com:/nfs /mnt
    1.2 VM-2:
        yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
        ssh-keygen 
        ssh-copy-id VM-1-IP
        ssh-copy-id VM-2 IP
    1.3 VM-1
        . /root/perf-agent/pbench_setup/setup.sh # Install packages and pbench into VM-1 and VM-2.
        . /etc/profile.d/pbench-agent.sh
        cd /opt/pbench-agent/bench-scripts/
        cp pbench-uperf pbench-uperf-lite # (tcp,udp)*(stream,rr)*(1,1024)*(1,8)*(2samples,5maxstddevpct,2failures,20s)
        cp pbench-uperf pbench-uperf-default # (tcp,udp)*(stream,maerts,rr)*(1,64,1024)*(1,8,64)*(3samples,5maxstddevpct,3failures,60s)
        cp pbench-uperf pbench-uperf-full # (tcp,udp)*(stream,maerts,bidirec,rr)*(1,64,1024,16384)*(1,8,64)*(5samples,5maxstddevpct,6failures,60s)
    1.4 VM-2:        
        ls /opt/pbench-agent # To check pbench-agent installation.
        uperf -V # To check package installation.        
        . /etc/profile.d/pbench-agent.sh        
2. Run pbench-uperf and handle results.
    2.1 VM-1:
        testrun_id=$(./make_testrunid.py --type uperf --platform ESXi --compose RHEL-8.3.0-20201009.2 --customized-labels x86_bios_default)
        [ -z $testrun_id ] && exit 1   
    2.2 VM-1
        log_path="/mnt/perf-insight/.exchange/uperf_results/$testrun_id"
        mkdir -p $log_path || exit 1  
    2.3 Prepare below info in a text for 2.4 for VM-1:
        {
           "testrun_id": 
           "guest-cpu": "8",
           "guest-flavor": "esx.g2.2xlarge",
           "guest-memory": "32GB",
           "hardware-net-driver": "vmxnet3",
           "hardware-net-duplex": "Full",
           "hardware-net-speed": "10000Mb/s",
           "hypervisor-cpu": "32",
           "hypervisor-cpu_model": "AMD EPYC 7302 16-Core Processor",
           "hypervisor-version": "VMware ESXi, 7.0.2, 17479126",
           "os-branch": "RHEL-8.3",
           "os-compose": "RHEL-8.3.0-20201009.2",
           "os-kernel": "4.18.0-240.el8.x86_64",
           "testrun-comments": "",
           "testrun-date": "2021-03-04",
           "testrun-id": "**********************************************",
           "testrun-platform": "ESXi",
           "testrun-type": "uperf",
           "tool-uperf_version": "uperf-1.0.7-1.el8.x86_64"
        }
    2.4 VM-1: 
        ./write_metadata.py --file $log_path/metadata.json --keypair testrun-id=$testrun_id --keypair testrun-type=uperf --keypair testrun-platform=ESXi --keypair testrun-date=2021-03-04 --keypair testrun-comments="" --keypair hardware-net-driver=VMXNET3 --keypair hardware-net-speed=10000Mb/s --keypair testrun_net-duplex=Full --keypair testrun_os-branch=RHEL-8.3 --keypair testrun_os-compose=RHEL-8.3.0-20201009.2 --keypair testrun_os-kernel=4.18.0-240.el8.x86_64 --keypair tool-uperf_version=uperf-1.0.7-1.el8.x86_64 --keypair guest-cpu=8 --keypair guest-flavor=esx.g2.2xlarge --keypair guest-memory=32GB --keypair hypervisor-cpu=32 --keypair hypervisor-cpu_model="AMD EPYC 7302 16-Core Processor" --keypair hypervisor-version="VMware ESXi, 7.0.2, 17479126"    2.5 VM-1:
        pbench-uperf-tiny --config=${testrun_id#*_} -C VM-1  -S VM-2
    2.6 VM-1:
        mv /var/lib/pbench-agent/${testrun_id}* $log_path


